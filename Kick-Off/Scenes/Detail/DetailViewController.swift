//
//  DetailViewController.swift
//  Kick-Off
//
//  Created by Burak Çokyıldırım on 8.03.2022.
//
//  Template generated by Burak Cokyildirim
//

import UIKit
import WebKit

class DetailViewController: BaseViewController {
    
    // MARK: - Outlets
    @IBOutlet weak var coverImageView: UIImageView!
    @IBOutlet weak var headlineLabel: UILabel!
    @IBOutlet weak var tagsCollectionView: UICollectionView!
    @IBOutlet weak var collectionViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var contentWebView: WKWebView!
    @IBOutlet var contentWebViewHeightConstraint: NSLayoutConstraint! {
        didSet {
            contentWebViewHeightConstraint.isActive = false
        }
    }

    // MARK: - Dependencies
    var presenter: DetailPresenterViewProtocol!
    
    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        presenter.fetchDetails()
    }
    
    // MARK: - Configure
    
    override func configureView() {
        super.configureView()
        configureCollectionView()
        contentWebView.navigationDelegate = self
    }
    
    // MARK: - Initialization
    private func configureCollectionView() {
        let flowLayout =  TagsCollectionViewFlowLayout()
        flowLayout.estimatedItemSize = UICollectionViewFlowLayout.automaticSize
        tagsCollectionView.collectionViewLayout = flowLayout
        tagsCollectionView.dataSource = self
        tagsCollectionView.register(
            UINib(nibName: TagCell.className, bundle: .main),
            forCellWithReuseIdentifier: TagCell.className)
    }
}

// MARK: - Extensions
extension DetailViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        presenter.tagNumbers()
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(
            withReuseIdentifier: TagCell.className, for: indexPath) as? TagCell
        if let tag = presenter.tag(of: indexPath.row) {
            cell?.setup(with: tag)
        }
        return cell ?? UICollectionViewCell()
    }
}

extension DetailViewController: WKNavigationDelegate {
    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.01) { [weak self] in
            self?.contentWebViewHeightConstraint.constant = webView.scrollView.contentSize.height
            self?.contentWebViewHeightConstraint.isActive = true
            self?.hideLoading()
        }
    }

    func webView(
        _ webView: WKWebView,
        decidePolicyFor navigationAction: WKNavigationAction,
        decisionHandler: @escaping (WKNavigationActionPolicy) -> Void
    ) {
        if navigationAction.navigationType == .linkActivated {
            if let url = navigationAction.request.url,
                url.host != nil,
                UIApplication.shared.canOpenURL(url) {
                UIApplication.shared.open(url)
                decisionHandler(.cancel)
            } else {
                decisionHandler(.allow)
            }
        } else {
            decisionHandler(.allow)
        }

    }
}

// MARK: - Protocol Implemantations
extension DetailViewController: DetailViewControllerProtocol {
    func showContentDetail(with model: ContentDetailModel, htmlString: String) {
        if let coverImageUrl = model.cover?.url {
            coverImageView.kf.setImage(with: URL(string: coverImageUrl))
        }

        headlineLabel.text = model.headline
        tagsCollectionView.reloadData()
        tagsCollectionView.layoutSubviews()
        collectionViewHeightConstraint.constant = tagsCollectionView.contentSize.height

        contentWebView.loadHTMLString(htmlString, baseURL: nil)
    }
}
