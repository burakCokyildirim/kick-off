//
//  DetailPresenter.swift
//  Kick-Off
//
//  Created by Burak Çokyıldırım on 8.03.2022.
//
//  Template generated by Burak Cokyildirim
//

import Foundation

class DetailPresenter: BasePresenter {
    
    // MARK: - Dependencies
    fileprivate var viewController: DetailViewControllerProtocol!
    fileprivate var interactor: DetailInteractorProtocol!
    fileprivate var delegate: DetailPresenterDelegateProtocol?
    
    // MARK: - Extras
    var content: ContentsModel.Content

    // MARK: - Properties
    var contentDetail: ContentDetailModel?
    
    // MARK: - Initialization
    init(viewController: DetailViewControllerProtocol, interactor: DetailInteractorProtocol, delegate: DetailPresenterDelegateProtocol?, extras: Any?) {
        self.viewController = viewController
        self.interactor = interactor
        self.delegate = delegate
        
        if let content = extras as? ContentsModel.Content {
            self.content = content
        } else {
            self.content = ContentsModel.Content.init()
        }
    }
    
    override func showNetworkError(with error: NetworkError) {
        viewController.hideLoading()
        viewController.showAlert(with: error.localizedDescription)
    }

    private func contentHtmlString() -> String {
        var body = Node(arrayLiteral: [])
        let elements = contentDetail?.content ?? []
        for element in elements {
            if let headerString = element.header {
                body.append(.h2("\(headerString)"))
            } else if let paragraphString = element.paragraph {
                body.append(.p("\(paragraphString)"))
            }
        }
        let node: Node =
            .document(
                .html(
                    .head(.style(safe: HtmlStyleSheet.default)),
                    .body(body)
                )
            )
        return render(node)
    }
}

// MARK: View Protocol
extension DetailPresenter: DetailPresenterViewProtocol {
    func fetchDetails() {
        guard let contentId = content.id else { return }
        viewController.showLoading()
        interactor.fetchDetails(with: contentId)
    }

    func tagNumbers() -> Int {
        contentDetail?.tags?.count ?? 0
    }

    func tag(of index: Int) -> ContentsModel.Tag? {
        contentDetail?.tags?[index]
    }
}

// MARK: Interactor Protocol
extension DetailPresenter: DetailPresenterInteractorProtocol {
    func loadContentDetail(with model: ContentDetailModel) {
        contentDetail = model
        let contentHtmlString = contentHtmlString()
        viewController.showContentDetail(with: model, htmlString: contentHtmlString)
    }
}

